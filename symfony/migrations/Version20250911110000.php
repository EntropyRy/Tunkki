<?php

declare(strict_types=1);

namespace DoctrineMigrations;

use Doctrine\DBAL\Schema\Schema;
use Doctrine\Migrations\AbstractMigration;

final class Version20250911110000 extends AbstractMigration
{
    public function getDescription(): string
    {
        return 'Normalize Sonata Classification context IDs: convert numeric ids (1,2,3,4) to semantic (default,item,sonata_category,sonata_collection) and remove duplicate autogenerated default context.';
    }

    public function up(Schema $schema): void
    {
        // We intentionally do NOT recreate foreign keys here; a later Doctrine diff can add them.

        // 1. Disable FK checks to allow PK updates safely.
        $this->addSql('SET FOREIGN_KEY_CHECKS = 0');

        // 2. Consolidate duplicate default context (id=\'default\') into numeric id=1 which we will rename.
        //    First, move any referencing rows currently pointing at semantic \'default\' to numeric \'1\' (if both exist).
        $this->addSql("UPDATE classification__category SET context='1' WHERE context='default'");
        $this->addSql("UPDATE classification__tag SET context='1' WHERE context='default'");
        $this->addSql("UPDATE classification__collection SET context='1' WHERE context='default'");

        // 3. Remove the autogenerated semantic row (will be recreated via renaming numeric id later).
        $this->addSql("DELETE FROM classification__context WHERE id='default'");

        // 4. Rename numeric ids to semantic ids inside classification__context.
        //    Do default first (id 1 -> 'default')
        $this->addSql("UPDATE classification__context SET id='default' WHERE id='1'");
        //    Then other contexts (order does not matter as their target ids do not yet exist)
        $this->addSql("UPDATE classification__context SET id='item' WHERE id='2'");
        $this->addSql("UPDATE classification__context SET id='sonata_category' WHERE id='3'");
        $this->addSql("UPDATE classification__context SET id='sonata_collection' WHERE id='4'");

        // 5. Update referencing rows for the renamed contexts.
        $this->addSql("UPDATE classification__category SET context='default' WHERE context='1'");
        $this->addSql("UPDATE classification__tag SET context='default' WHERE context='1'");
        $this->addSql("UPDATE classification__collection SET context='default' WHERE context='1'");

        $this->addSql("UPDATE classification__category SET context='item' WHERE context='2'");
        $this->addSql("UPDATE classification__tag SET context='item' WHERE context='2'");
        $this->addSql("UPDATE classification__collection SET context='item' WHERE context='2'");

        $this->addSql("UPDATE classification__category SET context='sonata_category' WHERE context='3'");
        $this->addSql("UPDATE classification__tag SET context='sonata_category' WHERE context='3'");
        $this->addSql("UPDATE classification__collection SET context='sonata_category' WHERE context='3'");

        $this->addSql("UPDATE classification__category SET context='sonata_collection' WHERE context='4'");
        $this->addSql("UPDATE classification__tag SET context='sonata_collection' WHERE context='4'");
        $this->addSql("UPDATE classification__collection SET context='sonata_collection' WHERE context='4'");

        // 6. (Optional) Shrink column length to 64 (Sonata typically uses <=64 chars); keep at 255 if you prefer.
        // Commented out to avoid unintended diffs; uncomment if you want canonical length.
        // $this->addSql("ALTER TABLE classification__context MODIFY id VARCHAR(64) NOT NULL");
        // $this->addSql("ALTER TABLE classification__category MODIFY context VARCHAR(64) DEFAULT NULL");
        // $this->addSql("ALTER TABLE classification__collection MODIFY context VARCHAR(64) DEFAULT NULL");
        // $this->addSql("ALTER TABLE classification__tag MODIFY context VARCHAR(64) DEFAULT NULL");

        // 7. Re-enable FK checks.
        $this->addSql('SET FOREIGN_KEY_CHECKS = 1');
    }

    public function down(Schema $schema): void
    {
        // Reversing this precisely (restoring original numeric auto-increment semantics) risks data loss.
        // If needed, create a manual follow-up migration. We mark this as irreversible.
        $this->throwIrreversibleMigrationException();
    }
}
