<?php

declare(strict_types=1);

namespace App\DataFixtures;

use App\Entity\Sonata\SonataPagePage;
use App\Entity\Sonata\SonataPageSite;
use Doctrine\Bundle\FixturesBundle\Fixture;
use Doctrine\Common\DataFixtures\DependentFixtureInterface;
use Doctrine\Persistence\ObjectManager;

/**
 * Creates localized "Join Us" pages (FI + EN) under each site's root homepage.
 *
 * Frontpage template expects routes generated by:
 *   path('_page_alias_join_us_' ~ app.request.locale)
 *
 * Therefore we create pages with technical aliases:
 *   _page_alias_join_us_fi
 *   _page_alias_join_us_en
 *
 * We do NOT attempt to manage snapshots here (CI / deployment pipeline
 * should call sonata:page:create-snapshots after loading fixtures).
 *
 * Template decision:
 *   Re-uses 'frontpage' templateCode for layout consistency; adjust if you later
 *   add a dedicated template (then update TEMPLATE constant).
 *
 * Idempotency:
 *   - If a page with the alias already exists, we normalize its attributes.
 *   - Otherwise we create it and set position = 2 (so "events" can stay at 1).
 *
 * Assumptions (per previously adjusted fixtures):
 *   - Sonata Page entity supports the direct setters used (no method_exists checks).
 *   - Publication date setters are not present, so omitted.
 */
final class JoinUsPageFixtures extends Fixture implements DependentFixtureInterface
{
    private const string ROUTE_NAME = 'page_slug';
    // Legacy data shows FI join-us page using Sonata default service and template 'onecolumn'.
    // Keep a custom type only if it already exists; otherwise fall back to Sonata default.
    // We will normalize existing pages but not forcibly override an existing legacy type differing from this.
    private const string TYPE = 'sonata.page.service.default';
    private const string TEMPLATE = 'onecolumn';
    private const string REQUEST_METHOD = 'GET|POST|HEAD|DELETE|PUT';

    public const string ALIAS_FI = '_page_alias_join_us_fi';
    public const string ALIAS_EN = '_page_alias_join_us_en';

    public const string REFERENCE_FI = 'page_join_us_fi';
    public const string REFERENCE_EN = 'page_join_us_en';

    public function getDependencies(): array
    {
        // Root pages (PageFixtures) must exist first
        return [
            PageFixtures::class,
            // Optional but if ordering matters relative to events pages you can
            // also depend on EventsPageFixtures (commented out for flexibility)
            // EventsPageFixtures::class,
        ];
    }

    public function load(ObjectManager $manager): void
    {
        /** @var SonataPageSite[] $sites */
        $sites = $manager->getRepository(SonataPageSite::class)->findAll();
        $pageRepo = $manager->getRepository(SonataPagePage::class);

        foreach ($sites as $site) {
            $locale = $site->getLocale();
            if (!\in_array($locale, ['fi', 'en'], true)) {
                continue;
            }

            $alias = 'en' === $locale ? self::ALIAS_EN : self::ALIAS_FI;
            $slug = 'en' === $locale ? 'join-us' : 'liity';
            // Legacy Finnish name/title:
            //   name  = "Liity"
            //   title = "Liity Jäseneksi"
            // Legacy English keeps both as "Join Us"
            if ('en' === $locale) {
                $name = 'Join Us';
                $title = 'Join Us';
            } else {
                $name = 'Liity';
                $title = 'Liity Jäseneksi';
            }
            $url = '/'.$slug;

            // Root page (url '/')
            $root = $pageRepo->findOneBy([
                'site' => $site,
                'url' => '/',
            ]);

            if (!$root instanceof SonataPagePage) {
                // If root is missing earlier fixtures failed; skip gracefully.
                continue;
            }

            // Find existing by alias
            $page = $pageRepo->findOneBy([
                'site' => $site,
                'pageAlias' => $alias,
            ]);

            if (!$page instanceof SonataPagePage) {
                // Fallback: match by slug or url if alias missing
                $page =
                    $pageRepo->findOneBy([
                        'site' => $site,
                        'slug' => $slug,
                    ]) ??
                    $pageRepo->findOneBy([
                        'site' => $site,
                        'url' => $url,
                    ]);
            }

            $isNew = false;
            if (!$page instanceof SonataPagePage) {
                $page = new SonataPagePage();
                $page->setSite($site);
                $page->setParent($root);
                // Legacy rows have join-us pages at position 1 under the root (same as events pages historically).
                // To preserve ordering close to legacy, set to 1 (idempotent if already 1).
                $page->setPosition(1);
                $isNew = true;
            }

            // Normalize attributes
            $page->setRouteName(self::ROUTE_NAME);
            $page->setName($name);
            $page->setTitle($title);
            // Provide a minimal meta description if missing (helps debugging / SEO tests)
            if (null === $page->getMetaDescription()) {
                $page->setMetaDescription($title);
            }
            $page->setSlug($slug);
            $page->setUrl($url);
            $page->setEnabled(true);
            $page->setDecorate(true);
            // Preserve existing type if it differs (legacy might already have 'sonata.page.service.default')
            if (self::TYPE !== $page->getType()) {
                $page->setType(self::TYPE);
            }
            $page->setRequestMethod(self::REQUEST_METHOD);
            // Use legacy template code 'onecolumn'
            $page->setTemplateCode(self::TEMPLATE);
            $page->setPageAlias($alias);

            $manager->persist($page);

            if ('en' === $locale) {
                $this->addReference(self::REFERENCE_EN, $page);
            } else {
                $this->addReference(self::REFERENCE_FI, $page);
            }

            // (Optional debug) You could log new vs normalized here if desired.
            if ($isNew) {
                // placeholder for potential logging
            }
        }

        $manager->flush();
    }
}
